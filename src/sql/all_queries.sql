CREATE TABLE "IXR_STUDENT" ( "STUDENT_ID" NUMBER (9,0) GENERATED AS IDENTITY INCREMENT BY 1 START WITH 100000001, "ENTRY_ACADEMIC_PERIOD" VARCHAR2 (30) NOT NULL, CONSTRAINT IXR_STUDENT PRIMARY KEY (STUDENT_ID) )

CREATE TABLE "IXR_INSTRUCTOR" ( "INSTRUCTOR_ID" NUMBER (5,0) GENERATED AS IDENTITY INCREMENT BY 1 START WITH 10001, "YEAR_OF_JOINING" NUMBER (4,0) NOT NULL, "YEAR_OF_LEAVING" NUMBER (4,0), CONSTRAINT IXR_INSTRUCTOR PRIMARY KEY (INSTRUCTOR_ID) )

CREATE TABLE "IXR_COURSE" ( "COURSE_ID" NUMBER (2,0) GENERATED AS IDENTITY INCREMENT BY 1 START WITH 1, "COURSE_NAME" VARCHAR2 (20) NOT NULL, CONSTRAINT IXR_COURSE PRIMARY KEY (COURSE_ID) )

CREATE TABLE IXR_ALLOCATE_INSTRUCTOR_COURSE ( "ALLOCATION_ID" NUMBER (9,0) GENERATED AS IDENTITY INCREMENT BY 1 START WITH 1, "COURSE_ID" NUMBER (2,0), "INSTRUCTOR_ID" NUMBER (5,0), "YEAR_ALLOCATED" NUMBER (4,0), CONSTRAINT IXR_INSTRUCTOR_COURSE11 PRIMARY KEY (ALLOCATION_ID), CONSTRAINT IXR_ENROLLMENT_STUDENT_COURSE_UNIQU1E UNIQUE (COURSE_ID, INSTRUCTOR_ID, YEAR_ALLOCATED), CONSTRAINT FK_COURSE_ID_311 FOREIGN KEY (COURSE_ID) REFERENCES IXR_COURSE(COURSE_ID), CONSTRAINT FK_INS_311 FOREIGN KEY (INSTRUCTOR_ID) REFERENCES IXR_INSTRUCTOR(INSTRUCTOR_ID) )

CREATE TABLE "IXR_SURVEY_QUESTION" ( "QUESTION_ID" NUMBER (1,0) GENERATED AS IDENTITY INCREMENT BY 1 START WITH 1, "QUESTION" VARCHAR2 (400) NOT NULL, CONSTRAINT IXR_SURVEY_QUESTION PRIMARY KEY (QUESTION_ID) )

CREATE TABLE IXR_ENROLLMENT_STUDENT_COURSE ( "ENROLLMENT_ID" NUMBER (9,0) GENERATED AS IDENTITY INCREMENT BY 1 START WITH 1, "COURSE_ID" NUMBER (2,0), "STUDENT_ID" NUMBER (9,0), "YEAR_OF_ENROLLMENT" NUMBER (4,0), CONSTRAINT IXR_STUDENT_COURSE1 PRIMARY KEY (ENROLLMENT_ID), CONSTRAINT IXR_ENROLLMENT_STUDENT_COURSE_UNIQUE UNIQUE (COURSE_ID, STUDENT_ID), CONSTRAINT FK_COURSE_ID_31 FOREIGN KEY (COURSE_ID) REFERENCES IXR_COURSE(COURSE_ID), CONSTRAINT FK_STUDENT_31 FOREIGN KEY (STUDENT_ID) REFERENCES IXR_STUDENT(STUDENT_ID) )

CREATE TABLE IXR_EVALUATION ( "EVALUATION_ID" NUMBER (9,0) GENERATED AS IDENTITY INCREMENT BY 1 START WITH 1, "STUDENT_ID" NUMBER (9,0) NOT NULL, "YEAR_OF_SURVEY" NUMBER(4,0) NOT NULL, "INSTRUCTOR_ID" NUMBER (5,0) NOT NULL, "COURSE_ID" NUMBER (2,0) NOT NULL, CONSTRAINT PK_IXR_EVALUATION PRIMARY KEY (EVALUATION_ID), CONSTRAINT IXR_IXR_EVALUATION_UNIQUE UNIQUE (COURSE_ID, STUDENT_ID, YEAR_OF_SURVEY), CONSTRAINT FK_STUDENT_231 FOREIGN KEY (STUDENT_ID) REFERENCES IXR_STUDENT(STUDENT_ID), CONSTRAINT FK_INSTRUCTOR_ID_231 FOREIGN KEY (INSTRUCTOR_ID) REFERENCES IXR_INSTRUCTOR(INSTRUCTOR_ID), CONSTRAINT FK_COURSE_ID_231 FOREIGN KEY (COURSE_ID) REFERENCES IXR_COURSE(COURSE_ID) )
alter table IXR_EVALUATION add (ANSWER1 NUMBER(1,0) default '1', constraint ckANSWER_VALUE111 check (ANSWER1 in (1, 2, 3, 4, 5)));
alter table IXR_EVALUATION add (ANSWER2 NUMBER(1,0) default '1', constraint ckANSWER_VALUE211 check (ANSWER2 in (1, 2, 3, 4, 5)));
alter table IXR_EVALUATION add (ANSWER3 NUMBER(1,0) default '1', constraint ckANSWER_VALUE311 check (ANSWER3 in (1, 2, 3, 4, 5)));
alter table IXR_EVALUATION add (ANSWER4 NUMBER(1,0) default '1', constraint ckANSWER_VALUE411 check (ANSWER4 in (1, 2, 3, 4, 5)));
alter table IXR_EVALUATION add (ANSWER5 NUMBER(1,0) default '1', constraint ckANSWER_VALUE511 check (ANSWER5 in (1, 2, 3, 4, 5)));

SELECT E.INSTRUCTOR_ID, e.YEAR_OF_SURVEY, DENSE_RANK() OVER (PARTITION BY E.YEAR_OF_SURVEY ORDER BY ((sum(E.ANSWER1 + E.ANSWER2 + E.ANSWER3 + E.ANSWER4 + E.ANSWER5))/(count(*)*25)*100)) Evaluation_Rank from IXR_EVALUATION E where e.YEAR_OF_SURVEY = 2018 group by E.INSTRUCTOR_ID, e.YEAR_OF_SURVEY order by e.YEAR_OF_SURVEY, Evaluation_Rank

SELECT * FROM (select YEAR_ALLOCATED, INSTRUCTOR_ID, COUNT(rownum)as rowcount from IXR_ALLOCATE_INSTRUCTOR_COURSE GROUP BY INSTRUCTOR_ID, YEAR_ALLOCATED) WHERE (rowcount <=2 AND YEAR_ALLOCATED = (SELECT MAX(YEAR_ALLOCATED) FROM IXR_ALLOCATE_INSTRUCTOR_COURSE))

SELECT COURSE_ID, INSTRUCTOR_ID, YEAR_ALLOCATED from IXR_ALLOCATE_INSTRUCTOR_COURSE WHERE YEAR_ALLOCATED = (SELECT MAX(YEAR_ALLOCATED) FROM IXR_ALLOCATE_INSTRUCTOR_COURSE)

SELECT E.COURSE_ID, R.COURSE_NAME, ROUND(AVG(E.ANSWER1 + E.ANSWER2 + E.ANSWER3 + E.ANSWER4 + E.ANSWER5),2) AS Average_Score FROM IXR_COURSE R INNER JOIN IXR_EVALUATION E on E.COURSE_ID = R.COURSE_ID GROUP BY E.COURSE_ID, R.COURSE_NAME ORDER BY E.COURSE_ID

SELECT INSTRUCTOR_ID, ROUND(AVG(ANSWER1)) AS Question_1, ROUND(AVG(ANSWER2)) AS Question_2, ROUND(AVG(ANSWER3)) AS Question_3, ROUND(AVG(ANSWER4)) AS Question_4, ROUND(AVG(ANSWER5)) AS Question_5 FROM IXR_EVALUATION GROUP BY INSTRUCTOR_ID

SELECT INSTRUCTOR_ID, ROUND(AVG(ANSWER1)) FROM IXR_EVALUATION GROUP BY INSTRUCTOR_ID

SELECT COURSE_ID, INSTRUCTOR_ID, YEAR_ALLOCATED FROM IXR_ALLOCATE_INSTRUCTOR_COURSE WHERE (YEAR_ALLOCATED = (SELECT MAX(YEAR_ALLOCATED) FROM IXR_ALLOCATE_INSTRUCTOR_COURSE))

select COURSE_ID, INSTRUCTOR_ID, YEAR_OF_SURVEY, ROUND(Sum(ANSWER1 + ANSWER2 + ANSWER3 + ANSWER4 + ANSWER5)/(count(*)*25)*100,2) AS SCORE from IXR_EVALUATION group by COURSE_ID, INSTRUCTOR_ID, YEAR_OF_SURVEY

WITH IXR_STUDENT_ENROLLED AS (select s.COURSE_ID, s.YEAR_OF_ENROLLMENT, count(s.STUDENT_ID) as Number_of_Students_Enrolled from IXR_ENROLLMENT_STUDENT_COURSE s group by S.COURSE_ID, S.YEAR_OF_ENROLLMENT ORDER BY S.COURSE_ID, S.YEAR_OF_ENROLLMENT) SELECT I.INSTRUCTOR_ID, e.YEAR_OF_ENROLLMENT as Year_in, sum(E.Number_of_Students_Enrolled) as Number_of_Students_Enrolled FROM IXR_STUDENT_ENROLLED E INNER JOIN IXR_ALLOCATE_INSTRUCTOR_COURSE I ON (E.COURSE_ID = I.COURSE_ID and E.YEAR_OF_ENROLLMENT = I.YEAR_ALLOCATED) WHERE YEAR_OF_ENROLLMENT = (SELECT MAX(YEAR_OF_ENROLLMENT) FROM IXR_STUDENT_ENROLLED) group by i.INSTRUCTOR_ID, e.YEAR_OF_ENROLLMENT order by i.INSTRUCTOR_ID

WITH Instructor_Ranks AS(select INSTRUCTOR_ID, YEAR_OF_SURVEY, RANK() OVER (PARTITION BY YEAR_OF_SURVEY ORDER BY ROUND(Sum(ANSWER1 + ANSWER2 + ANSWER3 + ANSWER4 + ANSWER5)/(count(*)*25)*100,2) DESC) AS RANKING from IXR_EVALUATION group by INSTRUCTOR_ID, YEAR_OF_SURVEY) select INSTRUCTOR_ID, YEAR_OF_SURVEY, RANKING, CASE RANK() OVER(ORDER BY RANKING DESC) WHEN 1 THEN 'Congrats! excellent performance - promised a 5% raise.' WHEN 2 THEN 'Congrats! excellent performance - promised a 5% raise.' WHEN 3 THEN 'Congrats! meets expectations - promised a 2% raise' ELSE 'Unsatisfactory - salary raise of 0.1%' END REVIEW FROM Instructor_Ranks ORDER BY RANKING

WITH IXR_STUDENT_ENROLLED AS (select s.COURSE_ID, s.YEAR_OF_ENROLLMENT, count(s.STUDENT_ID) as Number_of_Students_Enrolled from IXR_ENROLLMENT_STUDENT_COURSE s group by S.COURSE_ID, S.YEAR_OF_ENROLLMENT ORDER BY S.COURSE_ID, S.YEAR_OF_ENROLLMENT) SELECT I.INSTRUCTOR_ID, sum(E.Number_of_Students_Enrolled) as Number_of_Students_Enrolled_Till_Date FROM IXR_STUDENT_ENROLLED E INNER JOIN IXR_ALLOCATE_INSTRUCTOR_COURSE I ON (E.COURSE_ID = I.COURSE_ID and E.YEAR_OF_ENROLLMENT = I.YEAR_ALLOCATED) group by i.INSTRUCTOR_ID order by i.INSTRUCTOR_ID

WITH Instructor_Ranks AS(select INSTRUCTOR_ID, YEAR_OF_SURVEY, RANK() OVER (PARTITION BY YEAR_OF_SURVEY ORDER BY ROUND(Sum(ANSWER1 + ANSWER2 + ANSWER3 + ANSWER4 + ANSWER5)/(count(*)*25)*100,2) DESC) AS RANKING from IXR_EVALUATION WHERE YEAR_OF_SURVEY = (SELECT MAX(YEAR_OF_SURVEY) FROM IXR_EVALUATION ) group by INSTRUCTOR_ID, YEAR_OF_SURVEY) select INSTRUCTOR_ID, YEAR_OF_SURVEY, RANKING, CASE RANK() OVER(ORDER BY RANKING DESC) WHEN 1 THEN 'Congrats! excellent performance - promised a 5% raise.' WHEN 2 THEN 'Congrats! excellent performance - promised a 5% raise.' WHEN 3 THEN 'Congrats! meets expectations - promised a 2% raise' ELSE 'Unsatisfactory - salary raise of 0.1%' END REVIEW FROM Instructor_Ranks ORDER BY RANKING 